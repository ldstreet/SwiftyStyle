{"Typealiases.html#/s:11SwiftyStyle8Stylablea":{"name":"Stylable","abstract":"<p>Complete set of Stylable protocols. Conforming a base class to Stylable will give class ability to style and be re-styled at any given time. This also will allow you to use the StyleManager to re-style all living controls at any given time. Use this class if possible, but remember it will require you either to subclass, or to use some other work around in order to store the StyleInfo object</p>"},"Typealiases.html#/s:11SwiftyStyle13StylableBasica":{"name":"StylableBasic","abstract":"<p>Basic set of Stylable protocols. Because this set uses SwiftyStyleBasicKeyProtocol, controls will not have the ability to be re-styled, this means that a control will only be styled when the styleKey has been set. If done through the storyboard, this will be when the control is loaded. The key is not stored, and thus it cannot be reapplied later on. Use StylableBasic if you can&rsquo;t subclass and only need your controls to be styled once.</p>"},"Typealiases.html#/s:11SwiftyStyle12StylableBasea":{"name":"StylableBase","abstract":"<p>If you need your subclass to live at a lower-level (perhaps a common framework) but need to implement the style trategy and styling protocols at a higher level, use these protocols.  StylableBase will allow you to store the StyleInfo object in your base class.</p>"},"Typealiases.html#/s:11SwiftyStyle17StylableExtensiona":{"name":"StylableExtension","abstract":"<p>Conform to this protocol at a higher level than StylableBase in order to set a strategy and define style functions</p>"},"Typealiases.html#/s:11SwiftyStyle18StylableAdditionala":{"name":"StylableAdditional","abstract":"<p>Includes SwiftyAdditionalStyleProtocol to setup any additional styling not set up by SwiftyStyleProtocol</p>"},"Structs/StyleSet.html#/s:11SwiftyStyle0B3SetVACycfc":{"name":"init()","abstract":"<p>Empty initializer</p>","parent_name":"StyleSet"},"Structs/StyleSet.html#/s:11SwiftyStyle0B3SetVACs10DictionaryVyxypG10properties_tcs8HashableRzAA0B16PropertyProtocolRzlufc":{"name":"init(properties:)","abstract":"<p>Initialize with dictionary of StylePropertyProtocols: Any</p>","parent_name":"StyleSet"},"Structs/StyleSet.html#/s:11SwiftyStyle0B3SetV9subscriptxSgq_cAA0B16PropertyProtocolR_r0_lui":{"name":"subscript(_:)","abstract":"<p>Sets and retrieves properties inside the StyleSet</p>","parent_name":"StyleSet"},"Structs/StyleSet.html#/s:11SwiftyStyle0B3SetV9subscriptxSgAA0B8PropertyOclui":{"name":"subscript(_:)","abstract":"<p>Convenience subscript using default implementation of StyleProperty for better type inference</p>","parent_name":"StyleSet"},"Structs/CustomFontSet.html#/s:11SwiftyStyle13CustomFontSetVACSgSS8rawValue_tcfc":{"name":"init(rawValue:)","abstract":"<p>Undocumented</p>","parent_name":"CustomFontSet"},"Structs/CustomFontSet.html#/s:11SwiftyStyle13CustomFontSetV8rawValueSSv":{"name":"rawValue","abstract":"<p>Undocumented</p>","parent_name":"CustomFontSet"},"Structs/CustomFontSet.html#/s:11SwiftyStyle13CustomFontSetV4fontSo6UIFontCv":{"name":"font","abstract":"<p>Undocumented</p>","parent_name":"CustomFontSet"},"Structs/HexColorSet.html#/s:11SwiftyStyle11HexColorSetVACSgSS8rawValue_tcfc":{"name":"init(rawValue:)","abstract":"<p>Initializer takes in hex value as String</p>","parent_name":"HexColorSet"},"Structs/HexColorSet.html#/s:11SwiftyStyle11HexColorSetV8rawValueSSv":{"name":"rawValue","abstract":"<p>The original string provided during initialization</p>","parent_name":"HexColorSet"},"Structs/HexColorSet.html#/s:11SwiftyStyle11HexColorSetV5colorSo7UIColorCv":{"name":"color","abstract":"<p>UIColor derived from the rawValue</p>","parent_name":"HexColorSet"},"Structs/HexColorSet.html":{"name":"HexColorSet","abstract":"<p>Implementation of ColorSetProtocol which transform Hex strings into UIColors using the color&rsquo;s hex value as the String key.</p>"},"Structs/CustomFontSet.html":{"name":"CustomFontSet","abstract":"<p>Implementation of FontSetProtocol which uses UIFont&rsquo;s init(name:, size:) function to transform Strings into UIFonts using the font&rsquo;s name as the String key.</p>"},"Structs/StyleSet.html":{"name":"StyleSet","abstract":"<p>Hold properties used to style a control.</p>"},"Protocols/SwiftyStyleSetRetrieverProtocol.html#/s:11SwiftyStyle0aB20SetRetrieverProtocolPAAE05styleC0AA0bC0VSgAA0b3KeyE0_p3key_tF":{"name":"styleSet(key:)","abstract":"<p>Uses specified StyleStrategy to retrieve a StyleSet given a key.</p>","parent_name":"SwiftyStyleSetRetrieverProtocol"},"Protocols/SwiftyAdditionalStyleProtocol.html#/s:11SwiftyStyle0a10AdditionalB8ProtocolP010additionalB0yAA0B3SetV05styleF0_tF":{"name":"additionalStyle(styleSet:)","abstract":"<p>Called after style(styleSet: StyleSet) is called inside style(as key: String) to do any custom styling not defined by default styling implementations</p>","parent_name":"SwiftyAdditionalStyleProtocol"},"Protocols/StylePropertyProtocol.html#/s:11SwiftyStyle0B16PropertyProtocolP8rawValueSSv":{"name":"rawValue","abstract":"<p>Undocumented</p>","parent_name":"StylePropertyProtocol"},"Protocols/StyleKeyProtocol.html#/s:11SwiftyStyle0B11KeyProtocolP8rawValueSSv":{"name":"rawValue","abstract":"<p>Undocumented</p>","parent_name":"StyleKeyProtocol"},"Protocols/FontSetProtocol.html#/s:11SwiftyStyle15FontSetProtocolPxSgSS8rawValue_tcfc":{"name":"init(rawValue:)","abstract":"<p>Undocumented</p>","parent_name":"FontSetProtocol"},"Protocols/FontSetProtocol.html#/s:11SwiftyStyle15FontSetProtocolP8rawValueSSv":{"name":"rawValue","abstract":"<p>Undocumented</p>","parent_name":"FontSetProtocol"},"Protocols/FontSetProtocol.html#/s:11SwiftyStyle15FontSetProtocolP4fontSo6UIFontCv":{"name":"font","abstract":"<p>Undocumented</p>","parent_name":"FontSetProtocol"},"Protocols/StyleStrategy.html#/s:11SwiftyStyle0B8StrategyP08retrieveB3SetAA0bE0VSgAA0B11KeyProtocol_p03forbF0_tFZ":{"name":"retrieveStyleSet(forStyleKey:)","abstract":"<p>Defines how to retrieve a StyleSet using a styleKey. i.e. retrieve from plist, json, user defaults, programmatic definition. Source of style sets could be included at compile time or downloaded at run time, or updated dynamically throughout lifecycle of app.</p>","parent_name":"StyleStrategy"},"Protocols/StyleStrategy.html#/s:11SwiftyStyle0B8StrategyPAAE035transformDictionaryOfPropertiesIntoB3SetAA0bI0Vs0E0VySSypG10properties_AA05ColorI8Protocol_pXpSg0kI4TypeAA04FontiL0_pXpSg0niM0ypSgypcSg20customTransformationtFZ":{"name":"transformDictionaryOfPropertiesIntoStyleSet(properties:ColorSetType:FontSetType:customTransformation:)","abstract":"<p>Useful function for transforming a dictionary into a StyleSet. Use this function for values that must be transformed from an abstract representation into its meaningful value. i.e. transforming a color key as a String into a UIColor</p>","parent_name":"StyleStrategy"},"Protocols/ColorSetProtocol.html#/s:11SwiftyStyle16ColorSetProtocolPxSgSS8rawValue_tcfc":{"name":"init(rawValue:)","abstract":"<p>Undocumented</p>","parent_name":"ColorSetProtocol"},"Protocols/ColorSetProtocol.html#/s:11SwiftyStyle16ColorSetProtocolP8rawValueSSv":{"name":"rawValue","abstract":"<p>Undocumented</p>","parent_name":"ColorSetProtocol"},"Protocols/ColorSetProtocol.html#/s:11SwiftyStyle16ColorSetProtocolP5colorSo7UIColorCv":{"name":"color","abstract":"<p>Undocumented</p>","parent_name":"ColorSetProtocol"},"Protocols/SwiftyStyleProtocol.html#/s:11SwiftyStyle0aB8ProtocolP5styleyAA0B3SetV0dE0_tF":{"name":"style(styleSet:)","abstract":"<p>Defines how a control should be styled with a given styleSet. Most standard iOS controls should be defined inside the Swifty Style framework so this will mostly be used for custom controls.</p>","parent_name":"SwiftyStyleProtocol"},"Protocols/SwiftyStyleProtocol.html#/s:11SwiftyStyle0aB8ProtocolP5styleyAA0b3KeyC0_p2as_tF":{"name":"style(as:)","abstract":"<p>Defines how a style can be retrieved given a key. If control also conforms to SwiftyStyleSetRetrieverProtocol, then there is no need to implement style(as key: String)</p>","parent_name":"SwiftyStyleProtocol"},"Protocols/SwiftyStyleProtocol.html#/s:11SwiftyStyle0aB8ProtocolPA2A0ab4InfoC0RzAaBRzlE5styleyyF":{"name":"style()","abstract":"<p>Wraps style(as key: String), conrol must conform to SwiftyStyleInfoProtocol in order to style using styleKey</p>","parent_name":"SwiftyStyleProtocol"},"Protocols/SwiftyStyleInfoProtocol.html#/s:11SwiftyStyle0aB12InfoProtocolP05styleC0AA0bC0Cv":{"name":"styleInfo","abstract":"<p>Stores all information needed to style control after initial styling. Namely, this class holds a styleKey and the listener for re-styling triggered by the StyleManager</p>","parent_name":"SwiftyStyleInfoProtocol"},"Protocols/SwiftyStyleInfoProtocol.html#/s:11SwiftyStyle0aB12InfoProtocolPAAE8styleKeyAA0bfD0_pSgv":{"name":"styleKey","abstract":"<p>Computed property to expose styleKey outside of module, On get/set attach control to StyleInfo to start listening for re-style events</p>","parent_name":"SwiftyStyleInfoProtocol"},"Protocols/SwiftyStyleInfoProtocol.html":{"name":"SwiftyStyleInfoProtocol","abstract":"<p>Conform to this protocol in a base class in order to add stored info needed for styling"},"Protocols/SwiftyStyleProtocol.html":{"name":"SwiftyStyleProtocol","abstract":"<p>Conform to this protocol to define how a control should be styled given a key and a StyleSet</p>"},"Protocols/ColorSetProtocol.html":{"name":"ColorSetProtocol","abstract":"<p>Undocumented</p>"},"Protocols/StyleStrategy.html":{"name":"StyleStrategy","abstract":"<p>Conform to style strategy to define how your UI controls should retrieve their style sets.</p>"},"Protocols/FontSetProtocol.html":{"name":"FontSetProtocol","abstract":"<p>Undocumented</p>"},"Protocols/StyleKeyProtocol.html":{"name":"StyleKeyProtocol","abstract":"<p>Best used with string based enums, conform to this protocol in order to define style keys</p>"},"Protocols/StylePropertyProtocol.html":{"name":"StylePropertyProtocol","abstract":"<p>Conform to this protocol in order to interact with StyleSet</p>"},"Protocols/SwiftyAdditionalStyleProtocol.html":{"name":"SwiftyAdditionalStyleProtocol","abstract":"<p>Conform to this protocol for any additional styling not covered by default style() functions. If you are doing something special with a control that already conforms to SwiftyStyleProtocol then use this protocol to do additional stlying. additionalStyle(styleSet: StyleSet) will be</p>"},"Protocols/SwiftyStyleSetRetrieverProtocol.html":{"name":"SwiftyStyleSetRetrieverProtocol","abstract":"<p>Conform to this protocol to set what strategy will be used to retrieve a style set</p>"},"Extensions/String.html#/s:SS11SwiftyStyleE8rawValueSSv":{"name":"rawValue","abstract":"<p>Undocumented</p>","parent_name":"String"},"Extensions/String.html":{"name":"String","abstract":"<p>Conform to StylePropertyProtocol for easy use with StyleSet</p>"},"Enums/StylePlistType.html#/s:11SwiftyStyle0B9PlistTypeO07defaultC0A2CmF":{"name":"defaultPlist","abstract":"<p>Undocumented</p>","parent_name":"StylePlistType"},"Enums/StylePlistType.html#/s:11SwiftyStyle0B9PlistTypeO014regularRegularC0A2CmF":{"name":"regularRegularPlist","abstract":"<p>Undocumented</p>","parent_name":"StylePlistType"},"Enums/StylePlistType.html#/s:11SwiftyStyle0B9PlistTypeO014regularCompactC0A2CmF":{"name":"regularCompactPlist","abstract":"<p>Undocumented</p>","parent_name":"StylePlistType"},"Enums/StylePlistType.html#/s:11SwiftyStyle0B9PlistTypeO014compactCompactC0A2CmF":{"name":"compactCompactPlist","abstract":"<p>Undocumented</p>","parent_name":"StylePlistType"},"Enums/StylePlistType.html#/s:11SwiftyStyle0B9PlistTypeO014compactRegularC0A2CmF":{"name":"compactRegularPlist","abstract":"<p>Undocumented</p>","parent_name":"StylePlistType"},"Enums/StyleProperty.html#/s:11SwiftyStyle0B8PropertyO9textColorA2CmF":{"name":"textColor","abstract":"<p>Text color</p>","parent_name":"StyleProperty"},"Enums/StyleProperty.html#/s:11SwiftyStyle0B8PropertyO8fontSizeA2CmF":{"name":"fontSize","abstract":"<p>Font size</p>","parent_name":"StyleProperty"},"Enums/StyleProperty.html#/s:11SwiftyStyle0B8PropertyO4fontA2CmF":{"name":"font","abstract":"<p>Font</p>","parent_name":"StyleProperty"},"Enums/StyleProperty.html#/s:11SwiftyStyle0B8PropertyO15backgroundColorA2CmF":{"name":"backgroundColor","abstract":"<p>Cackground color</p>","parent_name":"StyleProperty"},"Enums/StyleProperty.html#/s:11SwiftyStyle0B8PropertyO9tintColorA2CmF":{"name":"tintColor","abstract":"<p>Tint color</p>","parent_name":"StyleProperty"},"Enums/StyleProperty.html#/s:11SwiftyStyle0B8PropertyO11borderColorA2CmF":{"name":"borderColor","abstract":"<p>Border color</p>","parent_name":"StyleProperty"},"Enums/StyleProperty.html#/s:11SwiftyStyle0B8PropertyO11borderWidthA2CmF":{"name":"borderWidth","abstract":"<p>Border width</p>","parent_name":"StyleProperty"},"Enums/StyleProperty.html#/s:11SwiftyStyle0B8PropertyO16normalTitleColorA2CmF":{"name":"normalTitleColor","abstract":"<p>Title color for normal state</p>","parent_name":"StyleProperty"},"Enums/StyleProperty.html#/s:11SwiftyStyle0B8PropertyO21normalBackgroundColorA2CmF":{"name":"normalBackgroundColor","abstract":"<p>Background color for normal state</p>","parent_name":"StyleProperty"},"Enums/StyleProperty.html#/s:11SwiftyStyle0B8PropertyO22normalTitleShadowColorA2CmF":{"name":"normalTitleShadowColor","abstract":"<p>Title shadow color for normal state</p>","parent_name":"StyleProperty"},"Enums/StyleProperty.html#/s:11SwiftyStyle0B8PropertyO18disabledTitleColorA2CmF":{"name":"disabledTitleColor","abstract":"<p>Title color for disabled state</p>","parent_name":"StyleProperty"},"Enums/StyleProperty.html#/s:11SwiftyStyle0B8PropertyO23disabledBackgroundColorA2CmF":{"name":"disabledBackgroundColor","abstract":"<p>Background color for disabled state</p>","parent_name":"StyleProperty"},"Enums/StyleProperty.html#/s:11SwiftyStyle0B8PropertyO24disabledTitleShadowColorA2CmF":{"name":"disabledTitleShadowColor","abstract":"<p>Title shadow color for disabled state</p>","parent_name":"StyleProperty"},"Enums/StyleProperty.html#/s:11SwiftyStyle0B8PropertyO18selectedTitleColorA2CmF":{"name":"selectedTitleColor","abstract":"<p>Title color for selected state</p>","parent_name":"StyleProperty"},"Enums/StyleProperty.html#/s:11SwiftyStyle0B8PropertyO23selectedBackgroundColorA2CmF":{"name":"selectedBackgroundColor","abstract":"<p>Background color for selected state</p>","parent_name":"StyleProperty"},"Enums/StyleProperty.html#/s:11SwiftyStyle0B8PropertyO24selectedTitleShadowColorA2CmF":{"name":"selectedTitleShadowColor","abstract":"<p>Title shadow color for selected state</p>","parent_name":"StyleProperty"},"Enums/StyleProperty.html#/s:11SwiftyStyle0B8PropertyO21highlightedTitleColorA2CmF":{"name":"highlightedTitleColor","abstract":"<p>Title color for highlighted state</p>","parent_name":"StyleProperty"},"Enums/StyleProperty.html#/s:11SwiftyStyle0B8PropertyO26highlightedBackgroundColorA2CmF":{"name":"highlightedBackgroundColor","abstract":"<p>Background color for highlighted state</p>","parent_name":"StyleProperty"},"Enums/StyleProperty.html#/s:11SwiftyStyle0B8PropertyO27highlightedTitleShadowColorA2CmF":{"name":"highlightedTitleShadowColor","abstract":"<p>Title shadow color for highlighted state</p>","parent_name":"StyleProperty"},"Enums/PreferredFontSet.html#/s:11SwiftyStyle16PreferredFontSetO4bodyA2CmF":{"name":"body","abstract":"<p>Undocumented</p>","parent_name":"PreferredFontSet"},"Enums/PreferredFontSet.html#/s:11SwiftyStyle16PreferredFontSetO7calloutA2CmF":{"name":"callout","abstract":"<p>Undocumented</p>","parent_name":"PreferredFontSet"},"Enums/PreferredFontSet.html#/s:11SwiftyStyle16PreferredFontSetO8caption1A2CmF":{"name":"caption1","abstract":"<p>Undocumented</p>","parent_name":"PreferredFontSet"},"Enums/PreferredFontSet.html#/s:11SwiftyStyle16PreferredFontSetO8caption2A2CmF":{"name":"caption2","abstract":"<p>Undocumented</p>","parent_name":"PreferredFontSet"},"Enums/PreferredFontSet.html#/s:11SwiftyStyle16PreferredFontSetO8footnoteA2CmF":{"name":"footnote","abstract":"<p>Undocumented</p>","parent_name":"PreferredFontSet"},"Enums/PreferredFontSet.html#/s:11SwiftyStyle16PreferredFontSetO8headlineA2CmF":{"name":"headline","abstract":"<p>Undocumented</p>","parent_name":"PreferredFontSet"},"Enums/PreferredFontSet.html#/s:11SwiftyStyle16PreferredFontSetO11subheadlineA2CmF":{"name":"subheadline","abstract":"<p>Undocumented</p>","parent_name":"PreferredFontSet"},"Enums/PreferredFontSet.html#/s:11SwiftyStyle16PreferredFontSetO6title1A2CmF":{"name":"title1","abstract":"<p>Undocumented</p>","parent_name":"PreferredFontSet"},"Enums/PreferredFontSet.html#/s:11SwiftyStyle16PreferredFontSetO6title2A2CmF":{"name":"title2","abstract":"<p>Undocumented</p>","parent_name":"PreferredFontSet"},"Enums/PreferredFontSet.html#/s:11SwiftyStyle16PreferredFontSetO6title3A2CmF":{"name":"title3","abstract":"<p>Undocumented</p>","parent_name":"PreferredFontSet"},"Enums/PreferredFontSet.html#/s:11SwiftyStyle16PreferredFontSetO10largeTitleA2CmF":{"name":"largeTitle","abstract":"<p>Undocumented</p>","parent_name":"PreferredFontSet"},"Enums/PreferredFontSet.html#/s:11SwiftyStyle16PreferredFontSetO4fontSo6UIFontCv":{"name":"font","abstract":"<p>Undocumented</p>","parent_name":"PreferredFontSet"},"Enums/SystemFontSet.html#/s:11SwiftyStyle13SystemFontSetO7regularA2CmF":{"name":"regular","abstract":"<p>Undocumented</p>","parent_name":"SystemFontSet"},"Enums/SystemFontSet.html#/s:11SwiftyStyle13SystemFontSetO4boldA2CmF":{"name":"bold","abstract":"<p>Undocumented</p>","parent_name":"SystemFontSet"},"Enums/SystemFontSet.html#/s:11SwiftyStyle13SystemFontSetO8semiboldA2CmF":{"name":"semibold","abstract":"<p>Undocumented</p>","parent_name":"SystemFontSet"},"Enums/SystemFontSet.html#/s:11SwiftyStyle13SystemFontSetO6mediumA2CmF":{"name":"medium","abstract":"<p>Undocumented</p>","parent_name":"SystemFontSet"},"Enums/SystemFontSet.html#/s:11SwiftyStyle13SystemFontSetO5blackA2CmF":{"name":"black","abstract":"<p>Undocumented</p>","parent_name":"SystemFontSet"},"Enums/SystemFontSet.html#/s:11SwiftyStyle13SystemFontSetO5lightA2CmF":{"name":"light","abstract":"<p>Undocumented</p>","parent_name":"SystemFontSet"},"Enums/SystemFontSet.html#/s:11SwiftyStyle13SystemFontSetO10ultraLightA2CmF":{"name":"ultraLight","abstract":"<p>Undocumented</p>","parent_name":"SystemFontSet"},"Enums/SystemFontSet.html#/s:11SwiftyStyle13SystemFontSetO4thinA2CmF":{"name":"thin","abstract":"<p>Undocumented</p>","parent_name":"SystemFontSet"},"Enums/SystemFontSet.html#/s:11SwiftyStyle13SystemFontSetO5heavyA2CmF":{"name":"heavy","abstract":"<p>Undocumented</p>","parent_name":"SystemFontSet"},"Enums/SystemFontSet.html#/s:11SwiftyStyle13SystemFontSetO6italicA2CmF":{"name":"italic","abstract":"<p>Undocumented</p>","parent_name":"SystemFontSet"},"Enums/SystemFontSet.html#/s:11SwiftyStyle13SystemFontSetO4fontSo6UIFontCv":{"name":"font","abstract":"<p>Undocumented</p>","parent_name":"SystemFontSet"},"Enums/SystemFontSet.html":{"name":"SystemFontSet","abstract":"<p>Implementation of FontSetProtocol which uses UIFont&rsquo;s systemFont(ofSize:, weight:) function to transform Strings into UIFonts using the font weight as the String key.</p>"},"Enums/PreferredFontSet.html":{"name":"PreferredFontSet","abstract":"<p>Implementation of FontSetProtocol which uses UIFont&rsquo;s preferredFont(forTextStyle:) function to transform Strings into UIFonts</p>"},"Enums/StyleProperty.html":{"name":"StyleProperty","abstract":"<p>Conforms to StylePropertyProtocol and contains all common style properties.</p>"},"Enums/StylePlistType.html":{"name":"StylePlistType","abstract":"<p>Defines all possible plists used in PlistStyleStrategy</p>"},"Classes/PlistStyleStrategy.html#/s:11SwiftyStyle05PlistB8StrategyC08retrieveB3SetAA0bF0VSgAA0B11KeyProtocol_p03forbG0_tFZ":{"name":"retrieveStyleSet(forStyleKey:)","abstract":"<p>Retreives StyleSet based on styleKey using current size classes to pick appropriate set</p>","parent_name":"PlistStyleStrategy"},"Classes/PlistStyleStrategyBase.html#/s:11SwiftyStyle05PlistB12StrategyBaseC03setC0yAA0bC4TypeO03forG0_SS9plistNameSo6BundleC6bundletFZ":{"name":"setPlist(forType:plistName:bundle:)","abstract":"<p>Retrieves and stores plist into memory</p>","parent_name":"PlistStyleStrategyBase"},"Classes/StyleManager.html#/s:11SwiftyStyle0B7ManagerC28listeningForSizeClassChangesSbv":{"name":"listeningForSizeClassChanges","abstract":"<p>Undocumented</p>","parent_name":"StyleManager"},"Classes/StyleManager.html#/s:11SwiftyStyle0B7ManagerC6sharedACvZ":{"name":"shared","abstract":"<p>Singleton</p>","parent_name":"StyleManager"},"Classes/StyleManager.html#/s:11SwiftyStyle0B7ManagerCACycfc":{"name":"init()","abstract":"<p>Undocumented</p>","parent_name":"StyleManager"},"Classes/StyleManager.html#/s:11SwiftyStyle0B7ManagerC16styleAllControlsyyFZ":{"name":"styleAllControls()","abstract":"<p>Posts an event to re-style all controls conforming to SwiftyStyleInfoProtocol and SwiftyStyleProtocol</p>","parent_name":"StyleManager"},"Classes/StyleInfo.html#/s:11SwiftyStyle0B4InfoCACycfc":{"name":"init()","abstract":"<p>Empty init that adds observer for re-styling events</p>","parent_name":"StyleInfo"},"Classes/StyleInfo.html":{"name":"StyleInfo","abstract":"<p>This class holds all info that needs to be stored. For now, this is only the styleKey which allows the control to be re-styled and and a observer for the style update notifications which is called by the StyleManager&rsquo;s styleAllControls() function</p>"},"Classes/StyleManager.html":{"name":"StyleManager","abstract":"<p>Undocumented</p>"},"Classes/PlistStyleStrategyBase.html":{"name":"PlistStyleStrategyBase","abstract":"<p>Base class for PlistStyleStrategy which holds static PlistStyleStrategyInfo since classes with generics cannot hold stored static variables</p>"},"Classes/PlistStyleStrategy.html":{"name":"PlistStyleStrategy","abstract":"<p>StyleStrategy that defines how to retrieve StyleSet. Needs designated ColorSet and FontSet to determine how colors and fonts should be translated from String into UIColor/UIFont</p>"},"Classes.html":{"name":"Classes","abstract":"<p>The following classes are available globally.</p>"},"Enums.html":{"name":"Enumerations","abstract":"<p>The following enumerations are available globally.</p>"},"Extensions.html":{"name":"Extensions","abstract":"<p>The following extensions are available globally.</p>"},"Protocols.html":{"name":"Protocols","abstract":"<p>The following protocols are available globally.</p>"},"Structs.html":{"name":"Structures","abstract":"<p>The following structures are available globally.</p>"},"Typealiases.html":{"name":"Type Aliases","abstract":"<p>The following type aliases are available globally.</p>"}}